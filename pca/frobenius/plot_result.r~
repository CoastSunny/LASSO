rm(list=ls())

library(R.matlab)
library(ggplot2)
library(grid)
library(reshape)

results = readMat("simulation_results.mat")

                                        #minimum norm results
aucCloseMinNorm = apply(results$aucCloseMinNormRuns, 2, mean)
aucCloseMinNormStd = apply(results$aucCloseMinNormRuns, 2, sd)
aucFarMinNorm = apply(results$aucFarMinNormRuns, 2, mean)
aucFarMinNormStd = apply(results$aucFarMinNormRuns, 2, sd)
mseMinNorm = apply(results$mseMinNormRuns, 2, mean)
mseMinNormStd = apply(results$mseMinNormRuns, 2, sd)
energyMinNorm = apply(results$energyMinNormRuns, 2, mean)
energyMinNormStd = apply(results$energyMinNormRuns, 2, sd)

                                        #lasso results
aucClose = apply(results$aucCloseRuns, 2, mean)
aucCloseStd = apply(results$aucCloseRuns, 2, sd)
aucFar = apply(results$aucFarRuns, 2, mean)
aucFarStd = apply(results$aucFarRuns, 2, sd)
mse = apply(results$mseRuns, 2, mean)
mseStd = apply(results$mseRuns, 2, sd)
energy = apply(results$energyRuns, 2, mean)
energyStd = apply(results$energyRuns, 2, sd)

                                        #averaging results
auc = apply(results$aucRunsAvg, 2, mean)
aucStd = apply(results$aucRunsAvg, 2, sd)
aucMinNorm = apply(results$aucMinNormRunsAvg, 2, mean)
aucMinNormStd = apply(results$aucMinNormRunsAvg, 2, sd)

                                        #prepare data for plotting
n = length(mse)
solution = c(rep("minimum norm", n), rep("lasso", n))
data = data.frame(aucClose=c(aucCloseMinNorm, aucClose), aucFar=c(aucFarMinNorm, aucFar), mse=c(mseMinNorm, mse), energy=c(energyMinNorm, energy), solution=solution)
data = cbind(melt(data), data.frame(error=c(aucCloseMinNormStd, aucCloseStd, aucFarMinNormStd, aucFarStd, mseMinNormStd, mseStd, energyMinNormStd, energyStd), subjects=rep(c(1, 2, 4, 8, 16, 25), 8)))

                                        #plotting
plt = ggplot(data) + facet_grid(variable ~ ., scale="free_y")  + geom_errorbar(aes(x=subjects, ymin=value-error, ymax=value+error, colour=solution), width=0.3) + geom_line(aes(x=subjects, y=value, colour=solution), size=2) + geom_point(aes(x=subjects, y=value), size=2, shape=21, fill="white") + scale_x_discrete("Number of subjects", breaks=c(1, 2, 4, 8, 16, 25)) + ggtitle("Average performance over 20 simulations") + theme_bw() + theme(strip.text.y=element_text(face="bold"), axis.title.y=element_blank(), plot.title=element_text(face="bold"))

plt = ggplot(data.frame(auc=c(aucMinNorm, auc), error=c(aucMinNormStd, aucStd), solution=solution, subjects=c(1, 2, 4, 8, 16, 25))) + geom_errorbar(aes(x=subjects, ymin=auc-error, ymax=auc+error, colour=solution), width=0.3) + geom_line(aes(x=subjects, y=auc, colour=solution), size=2) + geom_point(aes(x=subjects, y=auc), size=2, shape=21, fill="white") + xlab("number of subjects") + theme_bw() + theme(strip.text.y=element_text(face="bold"), axis.title.y=element_blank(), plot.title=element_text(face="bold"))
#--------------------------------------------------------------------------------------------------------------------------------------------------

                                        #plot df simulation
rm(list=ls())
library(R.matlab)
library(ggplot2)
results = readMat("df_data.mat")
data = data.frame(df=rep(results$df[1, ], 2), dfEstimated=c(results$dfEstimated[1, ], results$dfEstimatedNoRidge[1, ]), ridgeParam=rep(c("1.54e4", "0"), each=30))
plt = ggplot(data, aes(x=df, y=dfEstimated)) + geom_line(aes(colour=ridgeParam), size=1.5) + geom_abline(linetype="dashed", slope=1, intercept=0) + scale_x_continuous("True df") + scale_y_continuous("Estimated df") + theme_bw() + coord_equal()
#--------------------------------------------------------------------------------------------------------------------------------------------------

                                        #plot single simulation
rm(list=ls())
library(R.matlab)
library(ggplot2)
library(reshape)

results = readMat("1_subject.mat")
data = data.frame(rsquared=c(results$rsquared, results$rsquaredRidge), mse=c(results$mse, results$mseRidge), aucClose=c(results$aucClose, results$aucCloseRidge), aucFar=c(results$aucFar, results$aucFarRidge), energy=c(results$energy, results$energyRidge), gcvErrorLasso=c(results$gcvError, rep(NaN, 50)), gcvErrorRidge=c(rep(NaN, 51), results$gcvErrorRidge), method=rep(c("lasso", "ridge"), c(51, 50)))
data = cbind(melt(data)[-(1:101), ], rep(c(results$rsquared, results$rsquaredRidge), 6))
names(data)[4] = "rsquared"
data = data[intersect(which(data$rsquared>=0.09), which(data$rsquared<=0.14)), ]

bestIndex = which.min(results$gcvError[-51])

plt = ggplot(data, aes(x=rsquared, y=value)) + facet_grid(variable ~ ., scale="free_y") + geom_line(aes(x=rsquared, y=value, colour=method), size=1.5) + geom_point(size=1.5, shape=21, fill="white") + geom_vline(xintercept=c(results$rsquared[bestIndex], results$rsquaredRidge[which.min(results$gcvErrorRidge)]), linetype="longdash") + theme_bw() + ggtitle("1 subject") + theme(strip.text.y=element_text(size=12, face="bold"), axis.title.y=element_blank(), plot.title=element_text(face="bold"))
                                        #ols variance plot
plt = ggplot(data.frame(variance=as.vector(results$variance), param=as.vector(results$lambdaGridRidge)), aes(x=param, y=variance)) + geom_line(size=1.5) + geom_vline(xintercept=1.54e4, linetype="dashed") + theme_bw() + scale_x_log10("Ridge parameter") + scale_y_continuous("Variance")
#-----------------------------------------------------------------------------------------------------------------------------------

                                        #mse gap plot
rm(list=ls())
library(R.matlab)
library(ggplot2)
results = readMat("mse_gap.mat")
data = data.frame(mse = c(as.vector(results$msePca), as.vector(results$mseSvd)), error=c(as.vector(results$msePcaSd), as.vector(results$mseSvdSd)), numComponents=rep(1:8, 2), mseFrom=rep(c("PCA of forward matrices", "Temporal smoothing"), each=8))
plt = ggplot(data, aes(x=numComponents, y=mse)) + geom_line(aes(colour=mseFrom), size=1.5) + geom_errorbar(aes(ymin=mse-error, ymax=mse+error, colour=mseFrom), width=0.3) + scale_x_discrete("Number of principal components or right singular vectors of Y") + scale_y_continuous("MSE") + theme_bw()
